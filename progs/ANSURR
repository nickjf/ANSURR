#!/bin/bash
python_version=python
ANSURR_DIR=$(pwd)

########## PROGRAMS ##########
split_shifts=$ANSURR_DIR/progs/split_shifts.py
PANAV=$ANSURR_DIR/progs/PANAV.jar
RCI=$ANSURR_DIR/progs/RCI.py
extract=$ANSURR_DIR/progs/extract.py
DSSP=$ANSURR_DIR/progs/dssp-2.0.4-linux-i386
FIRST=$ANSURR_DIR/progs/calc_rigidity
rigid_decomp=$ANSURR_DIR/progs/rigid_decomp.py
split_decomp=$ANSURR_DIR/progs/split_decomp.py
compare=$ANSURR_DIR/progs/compare.py
plot2D=$ANSURR_DIR/progs/plot2D.py

########## ARGS ##########
echo ''
run_PANAV=0
free_ligands=0
nonstandard_res=0
oligomer=0
while getopts ":p:s:hlnor" opt; do
  case $opt in
	h) echo "Usage:"
	   echo " ansurr -p [pdb file] -s [NMRStarV3 shift file]"
	   echo "Options:"
	   echo " -h          | print this help message"
	   echo " -l          | include free ligands when calculating flexibility"
	   echo " -n          | include non-standard residues when calculating flexibility"
	   echo " -o          | combine chains when calculating flexibility (e.g. for dimers)"
	   echo " -r          | re-reference chemical shifts using PANAV before calculating RCI"
	   exit 1;;
    p) structure="${OPTARG%.*}"
	   if [ "$OPTARG" != $structure.pdb ]; then
			echo "structure file:" $OPTARG", renamed to $structure.pdb" | tee -a $log
			cp $OPTARG $structure.pdb
	   else 
			echo "structure file:" $OPTARG | tee -a $log
	   fi;;
    s) shifts="${OPTARG%.*}"
	   if [ "$OPTARG" != $shifts.str ]; then
			echo "shifts file:" $OPTARG", renamed to $shifts.str" | tee -a $log
			cp $OPTARG $shifts.str
	   else 
			echo "shifts file:" $OPTARG | tee -a $log
	   fi;;
	l)  free_ligands=1;;
	n)  nonstandard_res=1;;
	o)  oligomer=1;;
	r)  run_PANAV=1;;
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1;;
  esac
done

# pdb and shift file are required
if [ "x" == "x$structure" ]; then
 	echo "-p [pdb file] is required" | tee -a $log
	if [ "x" == "x$shifts" ]; then
  		echo "-s [shifts file] is required" | tee -a $log
  		exit 1
	fi
  exit 1
fi
if [ "x" == "x$shifts" ]; then
  echo "-s [shifts file] is required" | tee -a $log
  exit 1
fi

########## OUTPUT FOLDER ##########
rm -rf $structure'_'$shifts
mkdir -p $structure'_'$shifts
cp $structure.pdb $structure'_'$shifts
cp $shifts.str $structure'_'$shifts
cd $structure'_'$shifts
echo "output dir: "$structure'_'$shifts | tee -a $log

########## LOG FILE ##########
# log file
log=../ANSURR.log
DATE=`date '+%Y-%m-%d %H:%M:%S'`
echo $'\n-------------------------- '$DATE' running ANSURR ---------------------------' | tee -a $log

########## SPLIT SHIFTS ###########

entities=$(grep "_Entity.ID" $shifts.str | wc -l)
if (( $entities > 1 )); then
	echo "$entities entities found in shifts file" | tee -a $log
	$python_version $split_shifts $shifts.str | tee -a $log
	rm $shifts.str
fi

########## PANAV ##########
if [ $run_PANAV == 1 ]; then
	# check PANAV exists
	if [ -f "$PANAV" ]; then
		echo "re-referencing chemical shifts using PANAV" | tee -a $log
		run_PANAV=1
	else 
		echo " -> ERROR could not find $PANAV, will proceed without re-referencing chemical shifts" | tee -a $log
		run_PANAV=0
	fi
else
	echo "will not re-reference chemical shifts" | tee -a $log
fi

# run PANAV
if [ $run_PANAV == 1 ]; then
	if [ -z $(command -v java) ]; then	
		echo " -> ERROR Java is not installed, so cannot run PANAV, will proceed without re-referencing chemical shifts" | tee -a $log
		run_PANAV=0
	else
		rm -rf PANAV_temp 
		mkdir -p PANAV_temp
		cp  $shifts*.str PANAV_temp
		{ LIBC_FATAL_STDERR_=1 java -jar $PANAV PANAV_temp 2>/dev/null; } &>/dev/null
		# check PANAV success
		if (( $(ls -l PANAV_temp/*_calibrated 2>/dev/null | wc -l) > 0 )); then 
			for s in PANAV_temp/*.str; do
				F=$(basename $s)
				if [ -f PANAV_temp/"${F%.*}".out_calibrated ]; then
					mv PANAV_temp/"${F%.*}".out_calibrated "${F%.*}".panav
					echo " -> ${F%.*}" "DONE" | tee -a $log
				else
					echo " -> ${F%.*}" "ERROR PANAV failed to re-reference shifts, perhaps these are not protein backbone shifts?" | tee -a $log
				fi
			done
			rm -rf PANAV_temp 
			mkdir -p other_output/PANAV
			mv $shifts*'.panav' other_output/PANAV
		else
			echo " -> ERROR PANAV did not run succesfully for any shift files, will proceed without re-referencing chemical shifts" | tee -a $log
			run_PANAV=0
			rm -rf PANAV_temp
		fi
	fi
fi

########## RCI ##########
# run RCI
if [ -f "$RCI" ]; then
	echo "calculating RCI for each shifts file" | tee -a $log
	if [ $run_PANAV == 1 ]; then
		for s in other_output/PANAV/$shifts*'.panav'; do
			F=$(basename $s)
			echo -n ' -> '"${F%.*}"' ' | tee -a $log
			$python_version $RCI $s 2>/dev/null
			if [ -f "${F%.*}".rci ]; then
				echo "DONE" | tee -a $log
			else
				echo "ERROR" | tee -a $log
			fi
		done
	else
		for s in $shifts*.str; do 
			F=$(basename $s)
			echo -n ' -> '"${F%.*}"' ' | tee -a $log
			$python_version $RCI $s 2>/dev/null
			if [ -f "${F%.*}".rci ]; then
				echo "DONE" | tee -a $log
			else
				echo "ERROR" | tee -a $log
			fi
		done
	fi
else 
    echo " -> CRITCIAL ERROR could not find $RCI, exiting" | tee -a $log
	exit 1
fi

# check RCI success
if (( $(ls -l $shifts*'.rci' 2>/dev/null | wc -l) > 0 )); then 
	mkdir -p other_output/RCI
	mv $shifts*'.rci' other_output/RCI
else
	echo " -> CRITICAL ERROR RCI did not run successfully for any shifts file, exiting" | tee -a $log
	exit 1
fi

########## EXTRACT MODELS ##########
# extract models from pdb
if [ -f "$extract" ]; then
	echo "extracting models from $structure.pdb" | tee -a $log
	$python_version $extract $structure.pdb $free_ligands $nonstandard_res $oligomer
else 
    echo " -> CRITICAL ERROR could not find $extract, exiting" | tee -a $log
	exit 1
fi

#check extract success
count=$(ls -l $structure*'_'*.pdb 2>/dev/null | wc -l)
if [ $count -gt 0 ]; then
	mkdir -p other_output/extracted_pdbs
	mv $structure*'_'*.pdb other_output/extracted_pdbs
	if (( oligomer == 1 )); then
		mv combined other_output/extracted_pdbs/
	fi
	count=$(ls -l other_output/extracted_pdbs/*.pdb 2>/dev/null | wc -l)
	echo " -> extracted $count model(s)" | tee -a $log
else
	echo " -> CRITICAL ERROR failed to extract any models, exiting" | tee -a $log
	exit 1
fi

########## CALC SECONDARY STRUCTURE ##########
# extract models from pdb
if [ -f "$DSSP" ]; then
	echo "determining secondary structure for each model using DSSP" | tee -a $log
	mkdir -p other_output/DSSP
	for pdb in other_output/extracted_pdbs/$structure*.pdb; do
		F=$(basename $pdb)
		pdb_num="${F%.*}"
		$DSSP -i $pdb -o $pdb_num.temp.dssp
		sed -n -e '/#/,$p' $pdb_num.temp.dssp | tail -n +2 | cut -c6-11,13-17 | sed -e 's/^[[:space:]]*//' | tr -s ' ' > $pdb_num.dssp
		mv $pdb_num.dssp other_output/DSSP
		rm $pdb_num.temp.dssp
	done
else 
    echo " -> ERROR could not find $DSSP, will continue without determining secondary structure" | tee -a $log
fi

#check calc secondary structure success
count=$(ls -l other_output/DSSP/*.dssp 2>/dev/null | wc -l)
if [ $count -gt 0 ]; then
	echo " -> determined secondary structure for $count model(s)"  | tee -a $log
else
	echo " -> ERROR DSSP didn't predict secondary structure for any models"  | tee -a $log
fi

########## FIRST ##########
if [ -f "$FIRST" ]; then
	echo "calculating flexibility of each model using FIRST" | tee -a $log
	if (( oligomer == 1 )); then
		structures=other_output/extracted_pdbs/combined
	else
		structures=other_output/extracted_pdbs
	fi
	for pdb in $structures/$structure*.pdb; do 
		F=$(basename $pdb)
		pdb_num="${F%.*}"
		echo -n " -> $pdb_num" | tee -a $log
		{ LIBC_FATAL_STDERR_=1 $FIRST $pdb $ANSURR_DIR > $pdb_num'_FIRST.log' 2>/dev/null; } &>/dev/null
		if grep -q "Calculating rigidity" $pdb_num'_FIRST.log'; then
			echo " DONE" | tee -a $log
			$python_version $rigid_decomp $pdb $structures/decomp_list
			mkdir -p other_output/FIRST
			mv $pdb_num'.decomp' other_output/FIRST/
			rm -f $pdb_num'_FIRST.log'
			rm -f $structures/decomp_list
		else
			echo " ERROR FIRST did not run succesfully" | tee -a $log
			rm -f $structures/decomp_list
			rm -f $pdb_num'_FIRST.log'
		fi
	done
else
	echo " -> CRITICAL ERROR could not find $FIRST, exiting" | tee -a $log
	exit 1
fi

# check for any FIRST output
count=$(ls -l other_output/FIRST/*.decomp 2>/dev/null | wc -l)
if [ $count == 0 ]; then
	echo ' -> CRITICAL ERROR FIRST failed to run for any models, exiting' | tee -a $log
	exit 1
fi

########## COMPARE RCI FIRST ##########
echo "calculating validation scores, output will be saved to to $structure"_"$shifts/ANSURR_output" | tee -a $log
mkdir ANSURR_output
DATE=`date '+%Y-%m-%d %H:%M:%S'`
echo $'\n--------------------------- '$DATE' ANSURR output ----------------------------'  > scores.out

if (( $oligomer == 1 )); then
	for pdb in other_output/FIRST/$structure*.decomp; do
		$python_version $split_decomp $pdb
	done
	rm other_output/FIRST/$structure*.decomp
	cp -r *.decomp other_output/FIRST/
	rm *.decomp
fi
		
for pdb in other_output/FIRST/$structure*.decomp; do
	F=$(basename $pdb)
	pdb_num="${F%.*}"
	for s in other_output/RCI/$shifts*.rci; do 
		$python_version $compare $pdb $s other_output/DSSP/$pdb_num.dssp $ANSURR_DIR | tee -a $log
	done
done
rm -f resi_ref.txt
# check compare success
count=$(ls -l $structure*'_'*$shifts*'.out' 2>/dev/null | wc -l)
if [ $count -gt 0 ]; then
	$python_version $plot2D scores.out
	mkdir -p ANSURR_output/figs
	mkdir -p ANSURR_output/out
	mv scores.out ANSURR_output/
	mv $structure*'_'*'_'*$shifts*'.png' ANSURR_output/figs
	mv $structure*'_'*$shifts*'.out' ANSURR_output/out
	mv $structure*'_'*$shifts*'.png' ANSURR_output
	echo -n "summary of validation scores:"
	cat ANSURR_output/scores.out
else
	echo ' -> CRITICAL ERROR failed to calculate any validation scores, exiting' | tee -a $log
	exit 1
fi

cd ../
echo ''
exit
